name: Claude Mentions

on:
  # Respond to @claude mentions in comments
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  # Also respond to new issues with @claude
  issues:
    types: [opened]

jobs:
  respond:
    name: Respond to Mentions
    # Only run if @claude is mentioned
    # No "skip" status will appear if condition is false
    if: |
      contains(github.event.comment.body || github.event.review.body || github.event.issue.body, '@claude')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
      actions: read  # To read CI results
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Respond to Mention
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # Allow reading CI results for debugging
          additional_permissions: |
            actions: read
          
          # Allow running diagnostic commands
          allowed_tools: |
            Bash(cargo build --target *)
            Bash(cargo test --target *)
            Bash(cargo clippy)
            Bash(cargo fmt --check)
            Bash(cargo tree)
            Bash(rustc --version)
          
          # Project context
          custom_instructions: |
            You are Claude, responding to a mention in minidump-writer project.
            
            IMPORTANT: Always start by checking CLAUDE.md for project workflow.
            
            Documentation to reference:
            - CLAUDE.md - Development workflow
            - CONVENTIONS.md - Coding standards
            - ARCHITECTURE.md - Design patterns
            - DECISIONS.md - Past technical decisions
            - PRD.md - iOS requirements
            - TASKS.md - Current work items
            
            When responding:
            1. Be concise and helpful
            2. Reference relevant documentation
            3. Run diagnostic commands if needed
            4. Suggest following CLAUDE.md workflow
            5. Point to existing patterns in codebase
            
            Common requests:
            - "Why is clippy failing?" → Run cargo clippy and explain
            - "How should I implement X?" → Check ARCHITECTURE.md patterns
            - "Is this approach correct?" → Reference DECISIONS.md
            - "What's the convention for Y?" → Quote CONVENTIONS.md
            
            You cannot modify code directly, but you can:
            - Analyze and explain code
            - Run build/test commands
            - Suggest improvements
            - Reference documentation
            - Help debug issues